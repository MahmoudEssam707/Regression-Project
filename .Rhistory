upper_bound <- betas[beta] + margin
CI[beta,] <- c(lower_bound, upper_bound)
}
return(CI)
}
Confidence_Interval_of_B_vector(0.05)
#_______________________________# Gaber & Safy_________________________________________________#
# PRINTS #
cat("Summary statistics:\n"
,"  Matrix of X: ", x, "\n"
,"  Matrix of y: ", y, "\n"
,"  Matrix of (XtX): ", xtx, "\n"
,"  Matrix of C (XtX)^-1: ", xtx_inverse, "\n"
,"  Beta values: ", betas, "\n"
,"  SST: ", SST, "\n"
,"  SSR: ", SSR, "\n"
,"  SSE: ", SSE, "\n"
,"  R-squared: ", round(Rsquare * 100, 2))
# Print ANOVA table
cat('ANOVA table')
print(ANOVA)
}
Function <- switch(value_of_regression,
SLR = SLR(Data),
MLR = MLR(Data),
stop("Invalid input. Please enter 1 or 2."))
# MLP NEED FOR UPDATES, DON'T RUN IT !!!!
MLR <- function(Data){
#_______________________________# Mahmoud & Zyad_______________________________________________#
my_df <- as.matrix(Data)
big_x <- cbind(b0=rep(1,length(Data)),my_df)
x <- big_x[,-ncol(big_x)]
y <- subset(my_df, select = ncol(my_df))
xt <- t(x)
xtx <- xt%*%x
xtx_inverse <- solve(xtx)
xty <- xt%*%y
betas <- xtx_inverse%*%xt%*%y
betas
#_______________________________# Mahmoud & Zyad_______________________________________________#
#_______________________________# Bisho & Hamdy________________________________________________#
# Calculate y bar
y_bar=mean(y)
# length of y
n<-length(y)
# y transpose
yt<- t(y)
# betas transpose
betas_t<-t(betas)
# Calculate betas * (x transpose)
betas_x_t<-betas_t%*%xt
# Calculate SSE
SSE<- (yt%*%y)-(betas_x_t%*%y)
# Calaulate SST
SST<-(yt%*%y)-n*(y_bar)^2
# CAlculate SSR
SSR=SST-SSE
# Calculate R Square
Rsquare=1-(SSE/SST)
#_______________________________# Bisho & Hamdy________________________________________________#
#_______________________________# Ziad & Ali___________________________________________________#
#DEGREE OF FREEDOM
k <- ncol(big_x[, -c(1, ncol(big_x))])
DFR=k
p = k+1
DFE=n-p
DFT= DFR+DFE
#calculating Mean sum squares(regression,error)
MSR<-SSR/DFR
MSE<-SSE/DFE
# calculate F0
F0 <- MSR / MSE
#anova table
ANOVA=matrix(c(SSR,SSE,SST,DFR,DFE,DFT,MSR,MSE,"",F0,"",""),ncol=4)
row.names(ANOVA)=c("Treatment","Error","Total")
colnames(ANOVA)=c("Sum square","Degree of freedom","Mean sum square","F table")
ANOVA<- as.table(ANOVA)
SL <- as.numeric(readline("Enter significance level : "))
# FTEST
#######
#_______________________________# Ziad & Ali___________________________________________________#
#_______________________________# Gaber & Safy_________________________________________________#
diagonal_vector = xtx_inverse[row(xtx_inverse)==col(xtx_inverse)]
diagonal_vector*as.vector(MSE)
Confidence_Interval_of_B_vector <- function(SL){
t <- qt(SL/2, df = n - p, lower.tail = FALSE)
CI <- data.frame(lowers = numeric(length(betas)), uppers = numeric(length(betas)))
for (beta in 1:length(betas)){
margin <-  t * sqrt(MSE * diagonal_vector[beta])
lower_bound <- betas[beta] - margin
upper_bound <- betas[beta] + margin
CI[beta,] <- c(lower_bound, upper_bound)
}
return(CI)
}
Confidence_Interval_of_B_vector(0.05)
#_______________________________# Gaber & Safy_________________________________________________#
# PRINTS #
cat("Summary statistics:\n"
,"  Matrix of X: ", x, "\n"
,"  Matrix of y: ", y, "\n"
,"  Matrix of (XtX): ", xtx, "\n"
,"  Matrix of C (XtX)^-1: ", xtx_inverse, "\n"
,"  Beta values: ", betas, "\n"
,"  SST: ", SST, "\n"
,"  SSR: ", SSR, "\n"
,"  SSE: ", SSE, "\n"
,"  R-squared: ", round(Rsquare * 100, 2))
# Print ANOVA table
cat('ANOVA table\n')
print(ANOVA)
}
Function <- switch(value_of_regression,
SLR = SLR(Data),
MLR = MLR(Data),
stop("Invalid input. Please enter 1 or 2."))
Function <- switch(value_of_regression,
SLR = SLR(Data),
MLR = MLR(Data),
stop("Invalid input. Please enter 1 or 2."))
# MLP NEED FOR UPDATES, DON'T RUN IT !!!!
MLR <- function(Data){
#_______________________________# Mahmoud & Zyad_______________________________________________#
my_df <- as.matrix(Data)
big_x <- cbind(b0=rep(1,length(Data)),my_df)
x <- big_x[,-ncol(big_x)]
y <- subset(my_df, select = ncol(my_df))
xt <- t(x)
xtx <- xt%*%x
xtx_inverse <- solve(xtx)
xty <- xt%*%y
betas <- xtx_inverse%*%xt%*%y
betas
#_______________________________# Mahmoud & Zyad_______________________________________________#
#_______________________________# Bisho & Hamdy________________________________________________#
# Calculate y bar
y_bar=mean(y)
# length of y
n<-length(y)
# y transpose
yt<- t(y)
# betas transpose
betas_t<-t(betas)
# Calculate betas * (x transpose)
betas_x_t<-betas_t%*%xt
# Calculate SSE
SSE<- (yt%*%y)-(betas_x_t%*%y)
# Calaulate SST
SST<-(yt%*%y)-n*(y_bar)^2
# CAlculate SSR
SSR=SST-SSE
# Calculate R Square
Rsquare=1-(SSE/SST)
#_______________________________# Bisho & Hamdy________________________________________________#
#_______________________________# Ziad & Ali___________________________________________________#
#DEGREE OF FREEDOM
k <- ncol(big_x[, -c(1, ncol(big_x))])
DFR=k
p = k+1
DFE=n-p
DFT= DFR+DFE
#calculating Mean sum squares(regression,error)
MSR<-SSR/DFR
MSE<-SSE/DFE
# calculate F0
F0 <- MSR / MSE
#anova table
ANOVA=matrix(c(SSR,SSE,SST,DFR,DFE,DFT,MSR,MSE,"",F0,"",""),ncol=4)
row.names(ANOVA)=c("Treatment","Error","Total")
colnames(ANOVA)=c("Sum square","Degree of freedom","Mean sum square","F table")
ANOVA<- as.table(ANOVA)
SL <- as.numeric(readline("Enter significance level : "))
# FTEST
#######
#_______________________________# Ziad & Ali___________________________________________________#
#_______________________________# Gaber & Safy_________________________________________________#
diagonal_vector = xtx_inverse[row(xtx_inverse)==col(xtx_inverse)]
diagonal_vector*as.vector(MSE)
Confidence_Interval_of_B_vector <- function(SL){
t <- qt(SL/2, df = n - p, lower.tail = FALSE)
CI <- data.frame(lowers = numeric(length(betas)), uppers = numeric(length(betas)))
for (beta in 1:length(betas)){
margin <-  t * sqrt(MSE * diagonal_vector[beta])
lower_bound <- betas[beta] - margin
upper_bound <- betas[beta] + margin
CI[beta,] <- c(lower_bound, upper_bound)
}
return(CI)
}
Confidence_Interval_of_B_vector(0.05)
#_______________________________# Gaber & Safy_________________________________________________#
# PRINTS #
cat("Summary statistics:\n")
cat("  Matrix of X:\n")
print(x)
cat("\n")
cat("  Matrix of y:\n")
print(y)
cat("\n")
cat("  Matrix of (XtX):\n")
print(xtx)
cat("\n")
cat("  Matrix of C (XtX)^-1:\n")
print(xtx_inverse)
cat("\n")
cat("  Beta values:\n")
print(betas)
cat("\n")
cat("  SST:\n")
print(SST)
cat("\n")
cat("  SSR:\n")
print(SSR)
cat("\n")
cat("  SSE:\n")
print(SSE)
cat("\n")
cat("  R-squared:\n")
print(round(Rsquare * 100, 2))
# Print ANOVA table
cat("\nANOVA table:\n")
print(ANOVA)
}
print(Function)
Function <- switch(value_of_regression,
SLR = SLR(Data),
MLR = MLR(Data),
stop("Invalid input. Please enter 1 or 2."))
Function <- switch(value_of_regression,
SLR = SLR(Data),
MLR = MLR(Data),
stop("Invalid input. Please enter 1 or 2."))
# MLP NEED FOR UPDATES, DON'T RUN IT !!!!
MLR <- function(Data){
#_______________________________# Mahmoud & Zyad_______________________________________________#
my_df <- as.matrix(Data)
big_x <- cbind(b0=rep(1,length(Data)),my_df)
x <- big_x[,-ncol(big_x)]
y <- subset(my_df, select = ncol(my_df))
xt <- t(x)
xtx <- xt%*%x
xtx_inverse <- solve(xtx)
xty <- xt%*%y
betas <- xtx_inverse%*%xt%*%y
betas
#_______________________________# Mahmoud & Zyad_______________________________________________#
#_______________________________# Bisho & Hamdy________________________________________________#
# Calculate y bar
y_bar=mean(y)
# length of y
n<-length(y)
# y transpose
yt<- t(y)
# betas transpose
betas_t<-t(betas)
# Calculate betas * (x transpose)
betas_x_t<-betas_t%*%xt
# Calculate SSE
SSE<- (yt%*%y)-(betas_x_t%*%y)
# Calaulate SST
SST<-(yt%*%y)-n*(y_bar)^2
# CAlculate SSR
SSR=SST-SSE
# Calculate R Square
Rsquare=1-(SSE/SST)
#_______________________________# Bisho & Hamdy________________________________________________#
#_______________________________# Ziad & Ali___________________________________________________#
#DEGREE OF FREEDOM
k <- ncol(big_x[, -c(1, ncol(big_x))])
DFR=k
p = k+1
DFE=n-p
DFT= DFR+DFE
#calculating Mean sum squares(regression,error)
MSR<-SSR/DFR
MSE<-SSE/DFE
# calculate F0
F0 <- MSR / MSE
#anova table
ANOVA=matrix(c(SSR,SSE,SST,DFR,DFE,DFT,MSR,MSE,"",F0,"",""),ncol=4)
row.names(ANOVA)=c("Treatment","Error","Total")
colnames(ANOVA)=c("Sum square","Degree of freedom","Mean sum square","F table")
ANOVA<- as.table(ANOVA)
SL <- as.numeric(readline("Enter significance level : "))
# FTEST
#######
#_______________________________# Ziad & Ali___________________________________________________#
#_______________________________# Gaber & Safy_________________________________________________#
diagonal_vector = xtx_inverse[row(xtx_inverse)==col(xtx_inverse)]
diagonal_vector*as.vector(MSE)
Confidence_Interval_of_B_vector <- function(SL){
t <- qt(SL/2, df = n - p, lower.tail = FALSE)
CI <- data.frame(lowers = numeric(length(betas)), uppers = numeric(length(betas)))
for (beta in 1:length(betas)){
margin <-  t * sqrt(MSE * diagonal_vector[beta])
lower_bound <- betas[beta] - margin
upper_bound <- betas[beta] + margin
CI[beta,] <- c(lower_bound, upper_bound)
}
return(CI)
}
Confidence_Interval_of_B_vector(0.05)
#_______________________________# Gaber & Safy_________________________________________________#
# PRINTS #
cat("Summary statistics:\n")
cat("  Matrix of X:\n")
print(x)
cat("\n")
cat("  Vector of y:\n")
print(y)
cat("\n")
cat("  Matrix of (XtX):\n")
print(xtx)
cat("\n")
cat("  Matrix of C (XtX)^-1:\n")
print(xtx_inverse)
cat("\n")
cat("  Beta values:\n")
print(betas)
cat("\n")
cat("SST: ",SST)
cat("\n")
cat("SSR: ",SSR)
cat("\n")
cat("SSE: ",SSE)
cat("\n")
cat("  R-squared:\n")
print(round(Rsquare * 100, 2))
# Print ANOVA table
cat("\nANOVA table:\n")
print(ANOVA)
}
value_of_regression <- as.numeric(readline("Which type of method do you need? :\n1-SLR(Simple Linear Regression)\n2-MLR(Multiple Linear Regression)"))
Function <- switch(value_of_regression,
SLR = SLR(Data),
MLR = MLR(Data),
stop("Invalid input. Please enter 1 or 2."))
Function <- switch(value_of_regression,
SLR = SLR(Data),
MLR = MLR(Data),
stop("Invalid input. Please enter 1 or 2."))
Function <- switch(value_of_regression,
SLR = SLR(Data),
MLR = MLR(Data),
stop("Invalid input. Please enter 1 or 2."))
MLR <- function(Data){
# Constructing needed data
my_df <- as.matrix(data)
big_x <- cbind(b0=rep(1,length(data)),my_df)
x <- big_x[,-ncol(big_x)]
y <- subset(my_df, select = ncol(my_df))
xt <- t(x)
xtx <- xt%*%x
xtx_inverse <- solve(xtx)
xty <- xt%*%y
# OPERATIONS FOR SS
betas <- xtx_inverse%*%xt%*%y
y_bar <- mean(y)
betas_t <- t(betas)
# SUM SQUARES
SSE<- (t(y)%*%y)-(betas_t%*%xt%*%y)
# Calaulate SST
SST<-(t(y)%*%y)-(length(y))*(y_bar)^2
# CAlculate SSR
SSR=SST-SSE
R_square <- SSR/SST
#ANOV
k <- ncol(big_x[, -c(1, ncol(big_x))])
p <- k+1
MSR = SSR/k
MSE = SSE/(length(y)-p)
MST = MSR+MSE
# Draw Anova Table
anova_table <- data.frame(
row.names =  c("Regression", "Error", "Total"),
SS = c(SSR,SSE,SST),
DOF = c(k,length(y)-p,p),
MS = c(MSR,MSE,""),
F0 = c(MSR/MSE,"",""))
# Calculate the Value of R^2
R_squared <- SSR / SST
cat("Summary statistics:\n")
cat("Summary statistics:\n")
cat("  Matrix of X:\n")
print(x)
cat("\n")
cat("  Vector of y:\n")
print(y)
cat("\n")
cat("  Matrix of (XtX):\n")
print(xtx)
cat("\n")
cat("  Matrix of C (XtX)^-1:\n")
print(xtx_inverse)
cat("\n")
cat("  Beta values:\n")
print(betas)
cat("\n")
cat("SST: ",SST)
cat("\n")
cat("SSR: ",SSR)
cat("\n")
cat("SSE: ",SSE)
cat("\n")
cat("  R-squared:\n")
print(round(R_squared * 100, 2))
# Print ANOVA table
cat("\nANOVA table:\n")
print(anova_table)
}
Data <- read.csv(path)
value_of_regression <- as.integer(readline("Which type of method do you need? :\n1-SLR(Simple Linear Regression)\n2-MLR(Multiple Linear Regression)"))
print(MLR(Data=Data))
MLR <- function(Data){
# Constructing needed data
my_df <- as.matrix(data)
big_x <- cbind(b0=rep(1,length(data)),my_df)
x <- big_x[,-ncol(big_x)]
y <- subset(my_df, select = ncol(my_df))
xt <- t(x)
xtx <- xt%*%x
xtx_inverse <- solve(xtx)
xty <- xt%*%y
# OPERATIONS FOR SS
betas <- xtx_inverse%*%xt%*%y
y_bar <- mean(y)
betas_t <- t(betas)
# SUM SQUARES
SSE<- (t(y)%*%y)-(betas_t%*%xt%*%y)
# Calaulate SST
SST<-(t(y)%*%y)-(length(y))*(y_bar)^2
# CAlculate SSR
SSR=SST-SSE
R_square <- SSR/SST
#ANOV
k <- ncol(big_x[, -c(1, ncol(big_x))])
p <- k+1
MSR = SSR/k
MSE = SSE/(length(y)-p)
MST = MSR+MSE
# Draw Anova Table
anova_table <- data.frame(
row.names =  c("Regression", "Error", "Total"),
SS = c(SSR,SSE,SST),
DOF = c(k,length(y)-p,p),
MS = c(MSR,MSE,""),
F0 = c(MSR/MSE,"",""))
# Calculate the Value of R^2
R_squared <- SSR / SST
cat("Summary statistics:\n")
cat("Summary statistics:\n")
cat("  Matrix of X:\n")
print(x)
cat("\n")
cat("  Vector of y:\n")
print(y)
cat("\n")
cat("  Matrix of (XtX):\n")
print(xtx)
cat("\n")
cat("  Matrix of C (XtX)^-1:\n")
print(xtx_inverse)
cat("\n")
cat("  Beta values:\n")
print(betas)
cat("\n")
cat("SST: ",SST)
cat("\n")
cat("SSR: ",SSR)
cat("\n")
cat("SSE: ",SSE)
cat("\n")
cat("  R-squared:\n")
print(round(R_squared * 100, 2))
# Print ANOVA table
cat("\nANOVA table:\n")
print(anova_table)
}
Data <- read.csv(path)
value_of_regression <- as.integer(readline("Which type of method do you need? :\n1-SLR(Simple Linear Regression)\n2-MLR(Multiple Linear Regression)"))
groupA <- c("Reading", "Reading", "Listening", "Reading", "Listening")
groupB <- c("Listening", "Reading", "Listening", "Reading", "Listening")
# Create a contingency table
table <- table(groupA, groupB)
# Perform chi-square test
result <- chisq.test(table)
# Print the results
print(result)
groupA <- c("Reading", "Reading", "Listening", "Reading", "Listening")
groupB <- c("Listening", "Reading", "Listening", "Reading", "Listening")
# Create a contingency table
table <- table(groupA, groupB)
# Perform chi-square test
result <- chisq.test(table)
# Print the results
print(result)
groupA <- c("Reading", "Reading", "Listening", "Reading", "Listening")
groupB <- c("Listening", "Reading", "Listening", "Reading", "Listening")
# Create a contingency table
table <- table(groupA, groupB)
# Perform chi-square test
result <- t.test(table)
# Print the results
print(result)
groupA <- c("Reading", "Reading", "Listening", "Reading", "Listening")
groupB <- c("Listening", "Reading", "Listening", "Reading", "Listening")
# Create a contingency table
table <- table(groupA, groupB)
# Perform chi-square test
result <- t.test(table)
# Print the results
print(result)
